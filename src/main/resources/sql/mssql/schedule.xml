<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="eorder.schedule">
	<insert id="in" parameterType="hashmap">
	<!-- 2024-10-15 HSG MSSQL에서는 SEQUENCE를 사용할 수 없어 MAX로 대체 -->
		<selectKey keyProperty="scdSeq" resultType="long" order="BEFORE">
    		SELECT MAX(S.SCD_SEQ)+1 FROM SCHEDULE S;
    	</selectKey>
    	
	    INSERT INTO SCHEDULE 
			(
			SCD_SEQ 
			,SCD_DATE 
			,SCD_TITLE
			,SCD_INID
			,SCD_INDATE
			)
	    VALUES(
	    	<!-- 2024-10-15 HSG MSSQL에서는 SEQUENCE를 사용할 수 없어 MAX로 대체 -->
	    	<!-- - - USQ_SCHEDULE.NEXTVAL
			NEXT VALUE FOR USQ_SCHEDULE-->

			#{scdSeq} 	
			, CONVERT(DATE, #{m_scddate}, 102)
			,#{ m_scdtitle}
			,#{ m_scdinid}
			, GETDATE()	
			)
		<!-- 2024-10-15 HSG 주석 처리 후 아래 코드 삽입 <selectKey resultType="long" keyProperty="nowSeq" order="AFTER">
			SELECT USQ_SCHEDULE.CURRVAL FROM DUAL
		</selectKey>-->
	</insert>
	
	<select id="list" parameterType="hashmap" resultType="hashmap">
		SELECT SCD.*, US.*		     
		  FROM SCHEDULE SCD
		  LEFT OUTER JOIN O_USER US ON SCD.SCD_INID = US.USERID
		  <where>
		  		SCD_DATE = CONVERT(DATE, #{r_scddate}, 102)
	      </where>		
	</select>	
	
	<select id="listGroup" parameterType="hashmap" resultType="hashmap">
		SELECT *
		FROM 
			SCHEDULE
		<where>
			<![CDATA[
			SCD_DATE >= CONVERT(DATE, #{r_start}, 102) AND SCD_DATE < CONVERT(DATE, #{r_end}, 102)
			]]>
		</where>
	</select>
	
	<select id="cnt" parameterType="hashmap" resultType="long">
		SELECT COUNT(*) FROM SCHEDULE SCD
		<where>
				<if test="r_scdseq != null and r_scdseq != ''">SCD_SEQ = #{ r_scdseq }</if>		
	    		<!-- <if test="r_scddate != null and r_scddate != ''">AND SCD_DATE = TO_DATE(#{r_scddate}, 'yyyy-MM-dd')</if> -->
	    		<if test="r_scddate != null and r_scddate != ''">AND SCD_DATE = CONVERT(DATE, #{r_scddate}, 102)</if>
	    </where>		
	</select>
	
	<select id="one" parameterType="hashmap" resultType="hashmap">		
		SELECT SCD.*, US.*		     
		  FROM SCHEDULE SCD
		  LEFT OUTER JOIN O_USER US ON SCD.SCD_INID = US.USERID
		  <where>
		  	SCD_SEQ = #{ r_scdseq }	   		
	      </where>			      	     	     	
	</select>
	
	<update id="up" parameterType="hashmap" >
    	UPDATE SCHEDULE
    	<set>
			<if test=" m_scdtitle != null and m_scdtitle != '' ">SCD_TITLE = #{ m_scdtitle }, </if>
			<if test=" m_scdmoid != null and m_scdmoid != '' ">SCD_MOID = #{ m_scdmoid }, </if>
    		SCD_MODATE = GETDATE()
    	</set>
    	<where>
    		AND SCD_SEQ = #{ r_scdseq }
    	</where>
    </update>
	
	<delete id="del" parameterType="hashmap" >
		DELETE FROM SCHEDULE
		<where>
			 AND SCD_SEQ = #{ r_scdseq }			
		</where>
	</delete>
	
	
	<select id="getDailyEmailSenderList" parameterType="hashmap" resultType="hashmap">
		SELECT 
			M.CUST_CD, 
			M.CUST_MAIN_EMAIL, 
			M.CUST_SENDMAIL_YN , 
			M.SALESREP_EMAIL, 
			M.SALESREP_SENDMAIL_YN, 
			C.CUST_NM,
			C.SALESREP_NM
		FROM O_CUSTOMER_MAILINFO M
		LEFT JOIN O_CUSTOMER C ON M.CUST_CD = C.CUST_CD
		<where>
			M.CUST_SENDMAIL_YN = 'Y' OR M.SALESREP_SENDMAIL_YN = 'Y'
		</where>
	</select>
	
	<select id="getDailyEmailList" parameterType="hashmap" resultType="hashmap">
        <!-- SELECT 
			OH.CUST_CD, 
			OH.REQ_NO, 
			PT.PT_NAME, 
			OH.REQUEST_DT, 
			OH.REQUEST_TIME, 
			OC.CUST_NM, 
			OS.SHIPTO_NM,
			OI.DESC1,
			OD.QUANTITY,
			OS.ADD1,
			OH.TEL1
		FROM O_ORDER_CONFIRM_H OH
		LEFT JOIN O_ORDER_CONFIRM_D OD ON OH.CUST_PO = OD.CUST_PO 
		LEFT JOIN O_CUSTOMER OC ON OH.CUST_CD = OC.CUST_CD
		LEFT JOIN O_SHIPTO OS ON OH.SHIPTO_CD = OS.SHIPTO_CD 
		LEFT JOIN PLANT PT ON OH.COMPANY_CD  = PT.WERKS
		LEFT JOIN O_ITEM OI ON OD.ITEM_CD = OI.ITEM_CD
		<where>
			OH.CUST_CD = #{cust_code} AND OH.REQUEST_DT = #{request_dt}	
		</where>-->
		
		
		SELECT 
			OS.CUST_CD, 
			OS.ORDERNO AS REQ_NO,
			OS.PLANT_DESC AS PT_NAME, 
			OS.REQUEST_DT, 
			OS.REQUEST_TIME, 
			OS.CUST_NM, 
			OS.SHIPTO_NM,
			OS.ITEM_DESC AS DESC1,
			OS.ORDER_QTY AS QUANTITY,
			OS.ADD1, 
			'' AS TEL1
		FROM O_SALESORDER OS
		<where>
			OS.CUST_CD = #{cust_code} AND OS.REQUEST_DT = #{request_dt}	
		</where>
	</select>	
	
	<update id="insertUpdateDailyEmailScheduleTime" parameterType="map">
        <![CDATA[
        MERGE O_DynamicSchedule_Time AS T
        USING (
                 SELECT
                        #{m_hour}      AS TIME
                      , #{m_min}       AS MINUTE
                      , GETDATE()      AS INDATE
                      , 'id'		   AS INSERTID
              ) AS S
         ON T.INSERTID = S.INSERTID
         WHEN MATCHED THEN
              UPDATE SET
                     TIME       = S.TIME
                   , MINUTE     = S.MINUTE
                   , INDATE     = S.INDATE
                   , INSERTID   = S.INSERTID
         WHEN NOT MATCHED THEN
              INSERT (
                        TIME
                      , MINUTE
                      , INDATE
                      , INSERTID
                     )
              VALUES (
                        S.TIME
                      , S.MINUTE
                      , S.INDATE
                      , S.INSERTID
                     ); 
        ]]>
    </update>
    
    <select id="getDailyEmailScheduleTime" parameterType="hashmap" resultType="hashmap">
		SELECT * FROM O_DynamicSchedule_Time;
	</select>
	
	<insert id="insertDailyEmailSendLog" parameterType="map">
        <![CDATA[
        	INSERT INTO O_DynamicSchedule_Log (
				CUST_CD
				, TO_EMAIL
				, SALES_EMAIL
				, SENT_TIME
				, SENT_MIN
				, SEND_SUCCESS
				, SUBJECT
				, BODY
				, ERROR_CODE
				, ERROR_MESSAGE
				, INID
				, INDT
			) VALUES(
				#{m_cust_cd}
				, #{m_to_email}
				, #{m_sales_email}
				, #{m_sent_hour}
				, #{m_send_min}
				, #{m_success}
				, #{m_subject}
				, #{m_body}
				, #{m_err_code}
				, #{m_err_msg}
				, ''
				, getdate())
        ]]>
    </insert>
        
    <delete id="deleteDailyEmailSender" parameterType="map">
    	<![CDATA[
	    	DELETE O_CUSTOMER_MAILINFO 
			WHERE CUST_SENDMAIL_YN <> 'Y' AND SALESREP_SENDMaIL_YN <> 'Y'
		]]>
    </delete>
        
        
	
</mapper>